name: Firebase Deploy

on:
  push:
    branches:
      - '**' # This will trigger on pushes to all branches
      # The 'determine_env' step will correctly set production for master/main
      # and development for all other branches.
      # The job-level 'if' condition handles skipping CI for automated commits with skip flags or from bot actors.
  pull_request:
    branches:
      - master
      - main

jobs:
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    # Skip if commit message contains any of these skip flags or is from GitHub Actions
    if: >-
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[no ci]') &&
      github.actor != 'github-actions[bot]' &&
      github.actor != 'GitHub-Actions'

    env:
      NODE_VERSION: 22

    # Add permissions for writing to the repository
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest
          # Don't run install here

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Determine environment
        id: determine_env
        run: |
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main") ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "Using PRODUCTION environment"
            echo "envkeys=PROD_envKeys" >> $GITHUB_OUTPUT
            echo "service_account=PROD_FIREBASE_SERVICE_ACCOUNT" >> $GITHUB_OUTPUT
            echo "project_id=${{ secrets.PROD_FIREBASE_PROJECT_ID }}" >> $GITHUB_OUTPUT
            echo "project_id=${{ secrets.PROD_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "recaptcha_site_key=${{ secrets.PROD_RECAPTCHA_SITE_KEY }}" >> $GITHUB_ENV
            echo "recaptcha_secret_key=${{ secrets.PROD_RECAPTCHA_SECRET_KEY }}" >> $GITHUB_ENV
            echo "firebase_min_instances=${{ vars.PROD_FIREBASE_FUNCTION_MIN_INSTANCES || '1' }}" >> $GITHUB_ENV
            echo "firebase_max_instances=${{ vars.PROD_FIREBASE_FUNCTION_MAX_INSTANCES || '10' }}" >> $GITHUB_ENV
            echo "firebase_memory=${{ vars.PROD_FIREBASE_FUNCTION_MEMORY || '1GB' }}" >> $GITHUB_ENV
            echo "firebase_cpu=${{ vars.PROD_FIREBASE_FUNCTION_CPU || '1' }}" >> $GITHUB_ENV
            echo "firebase_timeout=${{ vars.PROD_FIREBASE_FUNCTION_TIMEOUT || '60' }}" >> $GITHUB_ENV
            echo "firebase_concurrency=${{ vars.PROD_FIREBASE_FUNCTION_CONCURRENCY || '80' }}" >> $GITHUB_ENV
            echo "FIREBASE_REGION=us-central1" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
            echo "Using DEVELOPMENT environment"
            echo "envkeys=DEV_envKeys" >> $GITHUB_OUTPUT
            echo "service_account=DEV_FIREBASE_SERVICE_ACCOUNT" >> $GITHUB_OUTPUT
            echo "project_id=${{ secrets.DEV_FIREBASE_PROJECT_ID }}" >> $GITHUB_OUTPUT
            echo "project_id=${{ secrets.DEV_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "recaptcha_site_key=${{ secrets.DEV_RECAPTCHA_SITE_KEY }}" >> $GITHUB_ENV
            echo "recaptcha_secret_key=${{ secrets.DEV_RECAPTCHA_SECRET_KEY }}" >> $GITHUB_ENV
            echo "firebase_min_instances=${{ vars.DEV_FIREBASE_FUNCTION_MIN_INSTANCES || '0' }}" >> $GITHUB_ENV
            echo "firebase_max_instances=${{ vars.DEV_FIREBASE_FUNCTION_MAX_INSTANCES || '5' }}" >> $GITHUB_ENV
            echo "firebase_memory=${{ vars.DEV_FIREBASE_FUNCTION_MEMORY || '512MB' }}" >> $GITHUB_ENV
            echo "firebase_cpu=${{ vars.DEV_FIREBASE_FUNCTION_CPU || '1' }}" >> $GITHUB_ENV
            echo "firebase_timeout=${{ vars.DEV_FIREBASE_FUNCTION_TIMEOUT || '60' }}" >> $GITHUB_ENV
            echo "firebase_concurrency=${{ vars.DEV_FIREBASE_FUNCTION_CONCURRENCY || '80' }}" >> $GITHUB_ENV
            echo "FIREBASE_REGION=us-central1" >> $GITHUB_ENV
          fi

      - name: Get branch name
        id: branch_name
        run: |
          BRANCH_SLUG=$(echo "${{ github.head_ref || github.ref_name }}" | sed 's/[^a-zA-Z0-9-]/-/g' | sed 's/-\+/-/g' | sed 's/^-//' | sed 's/-$//' | tr '[:upper:]' '[:lower:]')
          echo "Original branch: ${{ github.head_ref || github.ref_name }}"
          echo "Sanitized branch slug: $BRANCH_SLUG"
          echo "branch_slug=$BRANCH_SLUG" >> $GITHUB_OUTPUT

      - name: Configure Firebase for Branch
        id: configure_firebase
        if: env.ENVIRONMENT == 'development' # Only run for dev environment
        run: |
          output=$(node ./scripts/configure-firebase-branch.js)
          echo "$output"
          # Parse the output and set GitHub Actions outputs
          function_name=$(echo "$output" | grep "function_name=" | cut -d'=' -f2)
          hosting_site_id=$(echo "$output" | grep "hosting_site_id=" | cut -d'=' -f2)
          echo "function_name=$function_name" >> $GITHUB_OUTPUT
          echo "hosting_site_id=$hosting_site_id" >> $GITHUB_OUTPUT
        env:
          BRANCH_NAME: ${{ steps.branch_name.outputs.branch_slug }}
          FIREBASE_PROJECT_ID: ${{ steps.determine_env.outputs.project_id }}

      - name: Setup Firebase service account
        run: |
          # Ensure jq is installed (for JSON validation)
          sudo apt-get update -y && sudo apt-get install -y jq

          # Write service account JSON to file using jq for proper formatting
          echo '${{ secrets[steps.determine_env.outputs.service_account] }}' | jq . > service-account.json

          # Validate the JSON syntax
          jq empty service-account.json || { echo "Invalid JSON in service account file"; exit 1; }

          # Verify key fields exist in service account file
          if ! jq -e '.project_id' service-account.json > /dev/null; then
            echo "Error: service account JSON missing project_id field"
            exit 1
          fi
          if ! jq -e '.client_email' service-account.json > /dev/null; then
            echo "Error: service account JSON missing client_email field"
            exit 1
          fi
          if ! jq -e '.private_key' service-account.json > /dev/null; then
            echo "Error: service account JSON missing private_key field"
            exit 1
          fi

          # Set absolute path to service account file as environment variable
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/service-account.json" >> $GITHUB_ENV

          # Also set a flag so code knows we're in CI environment
          echo "CI=true" >> $GITHUB_ENV

          # Add the project root to NODE_PATH so imports work correctly
          echo "NODE_PATH=$(pwd)" >> $GITHUB_ENV

          echo "Service account validated and GOOGLE_APPLICATION_CREDENTIALS set to $(pwd)/service-account.json"

      - name: Set environment variables
        run: |
          # Decode environment variables from GitHub secret and write to .env file
          echo "${{ secrets[steps.determine_env.outputs.envkeys] }}" | base64 --decode > .env
          echo "Created environment file from ${{ steps.determine_env.outputs.envkeys }}"

          # Add additional required environment variables
          echo "NUXT_PUBLIC_RECAPTCHA_SITE_KEY=$recaptcha_site_key" >> .env
          echo "NUXT_RECAPTCHA_SECRET_KEY=$recaptcha_secret_key" >> .env

          # Add Firebase function configuration
          echo "FIREBASE_FUNCTION_MIN_INSTANCES=$firebase_min_instances" >> .env
          echo "FIREBASE_FUNCTION_MAX_INSTANCES=$firebase_max_instances" >> .env
          echo "FIREBASE_FUNCTION_MEMORY=$firebase_memory" >> .env
          echo "FIREBASE_FUNCTION_CPU=$firebase_cpu" >> .env
          echo "FIREBASE_FUNCTION_TIMEOUT=$firebase_timeout" >> .env
          echo "FIREBASE_FUNCTION_CONCURRENCY=$firebase_concurrency" >> .env

          # For troubleshooting - Print environment file without sensitive values
          echo "Environment file created with the following keys:"
          grep -v "KEY\|SECRET\|PASSWORD\|TOKEN" .env | sed 's/=.*/=***/' || echo "No non-sensitive keys found"

      - name: Setup FontAwesome
        run: |
          # Configure npm for FontAwesome authenticated access
          echo "@awesome.me:registry=https://npm.fontawesome.com/" > .npmrc
          echo "@fortawesome:registry=https://npm.fontawesome.com/" >> .npmrc
          echo "//npm.fontawesome.com/:_authToken=${{ secrets.FONTAWESOME_TOKEN }}" >> .npmrc

          # Debug - Verify .npmrc content (without showing token)
          echo "Verifying .npmrc configuration:"
          cat .npmrc | sed 's/_authToken=.*/_authToken=***HIDDEN***/' || echo ".npmrc not found!"
          echo "File permissions on .npmrc:"
          ls -la .npmrc || echo "File not found"

          # Ensure .npmrc is in the home directory as well (to catch alternate lookup paths)
          echo "@awesome.me:registry=https://npm.fontawesome.com/" > ~/.npmrc
          echo "@fortawesome:registry=https://npm.fontawesome.com/" >> ~/.npmrc
          echo "//npm.fontawesome.com/:_authToken=${{ secrets.FONTAWESOME_TOKEN }}" >> ~/.npmrc

          # Configure PNPM directly with the command-line tool
          # This ensures the settings are applied regardless of config file location
          pnpm config set @awesome.me:registry https://npm.fontawesome.com/
          pnpm config set @fortawesome:registry https://npm.fontawesome.com/
          pnpm config set //npm.fontawesome.com/:_authToken ${{ secrets.FONTAWESOME_TOKEN }}

          # PNPM 8 specific settings
          pnpm config set node-linker hoisted
          pnpm config set strict-peer-dependencies false
          pnpm config set auto-install-peers true
          pnpm config set resolution-mode highest
          pnpm config set ignore-compatibility-db true

          # Add Node.js 22 specific fixes for native modules
          pnpm config set prefer-frozen-lockfile false
          pnpm config set node-gyp-force-latest true
          pnpm config set symlink false

          # Verify PNPM configuration
          echo "PNPM configuration verification:"
          pnpm config get @fortawesome:registry || echo "PNPM config not set properly"

          echo "Created FontAwesome npm configuration in all relevant locations"

      - name: Prepare workspace
        run: |
          echo "Preparing workspace for Node 22 and PNPM 8..."
          bash ./scripts/ci-prepare-workspace.sh
          echo "Workspace preparation complete"

      - name: Verify package.json
        run: |
          # Verify package.json integrity first
          echo "Verifying package.json format..."
          node -e "
            const fs = require('fs');
            try {
              const data = fs.readFileSync('./package.json', 'utf8');
              JSON.parse(data);
              console.log('✅ package.json is valid JSON');
            } catch (e) {
              console.error('❌ Invalid JSON in package.json:', e.message);
              process.exit(1);
            }
          "

      - name: Install dependencies and update lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_GYP_FORCE_PYTHON: python3
        run: |
          echo "Installing dependencies and updating pnpm-lock.yaml..."
          pnpm install

          # Verify package.json integrity after installation
          echo "Verifying package.json integrity after installation..."
          if ! jq . package.json > /dev/null 2>&1; then
            echo "❌ ERROR: package.json is not valid JSON after installation!"
            exit 1
          else
            echo "✅ package.json integrity verified"
          fi

          # If running in a PR, we'll show the lockfile changes but not commit them
          # If running on main branches, we'll commit the updated lockfile
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/dev" || "${{ github.ref }}" == "refs/heads/development") ]]; then
            echo "Running on a main branch, checking for lockfile changes..."
            if git diff --name-only | grep -q "pnpm-lock.yaml"; then
              echo "Lockfile was updated. Committing changes."
              git config --global user.name "GitHub Actions"
              git config --global user.email "github-actions@github.com"
              git add pnpm-lock.yaml
              # Start with [skip ci] to ensure GitHub Actions skips this commit
              git commit -m "[skip ci][ci skip][no ci] chore: update pnpm-lock.yaml (automated)"

              # Push using the token for authentication
              echo "Pushing changes to repository..."
              git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
              git push --no-verify
            else
              echo "No changes to the lockfile detected."
            fi
          fi

      - name: Install FontAwesome packages explicitly
        run: |
          # Sometimes installing FontAwesome packages separately helps with authentication issues
          echo "Installing FontAwesome packages separately..."
          pnpm add @fortawesome/fontawesome-free || echo "Could not install @fortawesome/fontawesome-free"
          echo "FontAwesome installation step complete"

      - name: Run linting
        run: pnpm lint || echo "Linting issues found - review output"

      - name: Verify Node 22 compatibility
        run: |
          echo "Verifying Node 22 compatibility..."

          # Check node version
          echo "Node.js version: $(node -v)"

          # Check runtime engine details
          echo "V8 engine: $(node -p "process.versions.v8")"

          # Run the verification script
          node verify-node22.js --ci

          # Test functions build with Node 22
          bash ./test-functions-build.sh --ci

          echo "Node 22 compatibility verification complete."

      - name: Install vue-recaptcha-v3 if needed
        run: pnpm add vue-recaptcha-v3 || echo "Vue-recaptcha-v3 already installed"

      - name: Build application
        run: |
          # Set deployment environment variables
          export DEPLOY_ENV=$ENVIRONMENT
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service-account.json"
          export NITRO_PRESET=firebase
          export NUXT_PUBLIC_RECAPTCHA_SITE_KEY=$recaptcha_site_key
          export NUXT_RECAPTCHA_SECRET_KEY=$recaptcha_secret_key

          # Export Firebase function configuration
          export FIREBASE_FUNCTION_MIN_INSTANCES=$firebase_min_instances
          export FIREBASE_FUNCTION_MAX_INSTANCES=$firebase_max_instances
          export FIREBASE_FUNCTION_MEMORY=$firebase_memory
          export FIREBASE_FUNCTION_CPU=$firebase_cpu
          export FIREBASE_FUNCTION_TIMEOUT=$firebase_timeout
          export FIREBASE_FUNCTION_CONCURRENCY=$firebase_concurrency

          # Force Node.js 22
          export NODE_VERSION=22
          echo "Building for $ENVIRONMENT environment with Firebase preset using Node.js 22"

          # Set SKIP_WEBPACK_TYPES=true to avoid webpack type errors
          export SKIP_WEBPACK_TYPES=true

          # Build the application
          pnpm build

          # Verify the functions output
          echo "Verifying Firebase Functions output..."
          node scripts/verify-functions-output.js || echo "Function verification found issues that will be fixed during deployment"
        env:
          # Use Firebase preset for Nitro
          NITRO_PRESET: firebase

      - name: Run tests (if available)
        run: pnpm test || echo "No tests found or tests failed"
        continue-on-error: true

      - name: Prepare Firebase Functions
        run: |
          echo "Preparing Firebase Functions..."
          cd functions

          # Install dependencies for Firebase Functions
          echo "Installing dependencies in functions directory..."
          pnpm install

          # Ensure types are available
          pnpm add -D @types/node@22

          # Make sure firebase-functions and firebase-admin are installed
          echo "Ensuring firebase-functions and firebase-admin packages are installed..."
          pnpm add firebase-functions@6.3.2 firebase-admin@12.3.0

          # Ensure correct configuration for Firebase Functions TypeScript
          echo "Verifying TypeScript configuration..."
          cat tsconfig.json

          # Build TypeScript code with special CI config
          echo "Building with CI-specific config to avoid webpack type errors..."
          pnpm build

          # List compiled files to verify build
          echo "Compiled function files:"
          ls -la lib/ || echo "No compiled files found - check for build errors"

          cd ..
          echo "Firebase Functions preparation complete"

      - name: Install Firebase CLI
        run: |
          npm install -g firebase-tools@14.6.0
          # Install gcloud CLI for Auth domain management
          curl -sSL https://sdk.cloud.google.com | bash
          export PATH="$HOME/google-cloud-sdk/bin:$PATH"
          echo "$HOME/google-cloud-sdk/bin" >> $GITHUB_PATH
        # Using Firebase Tools v14.6.0 which is compatible with Node.js 22

      - name: Create Firebase Hosting Site (if needed)
        if: github.event_name == 'push' && env.ENVIRONMENT == 'development' && steps.configure_firebase.outputs.hosting_site_id != ''
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service-account.json"
          echo "🔍 Checking/Creating Firebase Hosting site for branch deployment..."
          echo "Site ID: ${{ steps.configure_firebase.outputs.hosting_site_id }}"
          echo "Project ID: ${{ steps.determine_env.outputs.project_id }}"

          # Use the project
          firebase use ${{ steps.determine_env.outputs.project_id }} --non-interactive

          # Create site if it doesn't exist (final version with comprehensive error handling)
          bash ./scripts/create-firebase-site-final.sh "${{ steps.configure_firebase.outputs.hosting_site_id }}" "${{ steps.determine_env.outputs.project_id }}"

      - name: Configure Firebase Auth Authorized Domains
        if: github.event_name == 'push' && env.ENVIRONMENT == 'development' && steps.configure_firebase.outputs.hosting_site_id != ''
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service-account.json"
          echo "🔐 Configuring Firebase Auth authorized domains for new site..."
          echo "Site ID: ${{ steps.configure_firebase.outputs.hosting_site_id }}"
          echo "Project ID: ${{ steps.determine_env.outputs.project_id }}"

          # Configure authorized domains for the new hosting site
          node ./scripts/configure-auth-domains.js "${{ steps.configure_firebase.outputs.hosting_site_id }}" "${{ steps.determine_env.outputs.project_id }}" || echo "⚠️  Auth domain configuration failed, but deployment will continue"

      - name: Set Deploy Targets
        id: deploy_targets
        shell: bash
        run: |
          firestore_target_arg="firestore"
          storage_target_arg="storage"
          hosting_target_arg="hosting"
          functions_target_arg="functions:server" # Default to production/mainline targets

          # Check if we are in a development environment (any non-master/main branch)
          if [[ "$ENVIRONMENT" == "development" ]]; then
            # The 'configure_firebase' step runs only for 'development' environment.
            # Its outputs will contain the branch-specific names.
            dev_hosting_site_id="${{ steps.configure_firebase.outputs.hosting_site_id }}"
            dev_function_name="${{ steps.configure_firebase.outputs.function_name }}"

            # For development branches, we'll use targeted deployments only for hosting and functions
            # Firestore and Storage will use default targets to avoid configuration complexity
            if [[ -n "$dev_hosting_site_id" ]]; then
              hosting_target_arg="hosting:$dev_hosting_site_id"
            fi

            # If dev_function_name is set (it should be, e.g., 'server-branch' or 'server' for 'dev' branch)
            if [[ -n "$dev_function_name" ]]; then
              functions_target_arg="functions:$dev_function_name"
            fi
          fi

          echo "firestore_target_arg=$firestore_target_arg" >> "$GITHUB_OUTPUT"
          echo "storage_target_arg=$storage_target_arg" >> "$GITHUB_OUTPUT"
          echo "hosting_target_arg=$hosting_target_arg" >> "$GITHUB_OUTPUT"
          echo "functions_target_arg=$functions_target_arg" >> "$GITHUB_OUTPUT"

          echo "Will use Firestore Target: $firestore_target_arg"
          echo "Will use Storage Target: $storage_target_arg"
          echo "Will use Hosting Target: $hosting_target_arg"
          echo "Will use Functions Target: $functions_target_arg"

      - name: Deploy to Firebase
        if: github.event_name == 'push'
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service-account.json"

          # Extract service account details for debugging
          PROJECT_ID=$(jq -r '.project_id' service-account.json)
          CLIENT_EMAIL=$(jq -r '.client_email' service-account.json)
          echo "Service account project: $PROJECT_ID"
          echo "Service account email: $CLIENT_EMAIL"

          # Using the service account credentials directly
          echo "Deploying to Firebase project: ${{ steps.determine_env.outputs.project_id }}"
          firebase use ${{ steps.determine_env.outputs.project_id }} --non-interactive

          # Check for Nuxt generated functions directory
          if [ -d ".output/server" ]; then
            echo "Preparing Nuxt-generated functions for Firebase deployment..."

            # Install dependencies in the output directory using the Nuxt-generated package.json
            echo "Installing dependencies in .output/server directory..."
            cd .output/server
            pnpm install

            # Verify firebase-functions package was installed
            if [ -d "node_modules/firebase-functions" ]; then
              echo "✅ firebase-functions package successfully installed"
            else
              echo "⚠️ Warning: firebase-functions package not found. Installing explicitly..."
              pnpm add firebase-functions@6.3.2 firebase-admin@12.3.0
            fi

            cd ../..
            echo "Dependencies installed in .output/server"
          else
            echo "⚠️ Warning: .output/server directory not found. Nuxt build may have failed."
            exit 1
          fi

          # Display function configuration being deployed
          echo "Function configuration:"
          echo "  Min instances: $firebase_min_instances"
          echo "  Max instances: $firebase_max_instances"
          echo "  Memory: $firebase_memory"
          echo "  CPU: $firebase_cpu"
          echo "  Timeout: $firebase_timeout s"
          echo "  Concurrency: $firebase_concurrency"

          # Log hosting site for branch deployments (no need to set, it's configured in firebase.json)
          if [[ "${{ env.ENVIRONMENT }}" == "development" && -n "${{ steps.configure_firebase.outputs.hosting_site_id }}" ]]; then
            echo "Deploying to branch-specific hosting site..."
            echo "Site ID: ${{ steps.configure_firebase.outputs.hosting_site_id }}"
          fi

          # Deploy each component separately to isolate any issues
          echo "Deploying Firestore rules and indexes..."
          firebase deploy --only ${{ steps.deploy_targets.outputs.firestore_target_arg }} --project ${{ steps.determine_env.outputs.project_id }} --non-interactive || echo "Firestore rules deployment failed, will try to continue with the rest"

          echo "Deploying Storage rules..."
          firebase deploy --only ${{ steps.deploy_targets.outputs.storage_target_arg }} --project ${{ steps.determine_env.outputs.project_id }} --non-interactive || echo "Storage rules deployment failed, will try to continue with the rest"

          echo "Deploying hosting..."
          if [[ "${{ env.ENVIRONMENT }}" == "development" && -n "${{ steps.configure_firebase.outputs.hosting_site_id }}" ]]; then
            echo "Deploying to branch-specific hosting site: ${{ steps.configure_firebase.outputs.hosting_site_id }}"
            firebase deploy --only hosting:${{ steps.configure_firebase.outputs.hosting_site_id }} --project ${{ steps.determine_env.outputs.project_id }} --non-interactive || echo "Hosting deployment failed, will try to continue with functions"
          else
            echo "Deploying to default hosting site"
            firebase deploy --only hosting --project ${{ steps.determine_env.outputs.project_id }} --non-interactive || echo "Hosting deployment failed, will try to continue with functions"
          fi

          # Run our custom script to ensure functions are properly prepared
          echo "Running prepare-functions-deploy script to ensure all dependencies are in place..."

          # Set the function name for the prepare script
          export FIREBASE_FUNCTION_NAME="${{ steps.configure_firebase.outputs.function_name || 'server' }}"
          echo "Setting FIREBASE_FUNCTION_NAME to: $FIREBASE_FUNCTION_NAME"

          bash ./scripts/prepare-functions-deploy.sh

          echo "Deploying functions..."
          echo "🎯 Function deployment details:"
          echo "  Target: ${{ steps.deploy_targets.outputs.functions_target_arg }}"
          echo "  Expected function name: ${{ steps.configure_firebase.outputs.function_name || 'server' }}"
          echo "  Project: ${{ steps.determine_env.outputs.project_id }}"

          # Deploy functions with detailed output
          if firebase deploy --only ${{ steps.deploy_targets.outputs.functions_target_arg }} --project ${{ steps.determine_env.outputs.project_id }} --non-interactive; then
            echo "✅ Functions deployed successfully"

            # List deployed functions for verification
            echo "📋 Verifying deployed functions:"
            firebase functions:list --project ${{ steps.determine_env.outputs.project_id }} || echo "Could not list functions"
          else
            echo "❌ Function deployment failed"
            exit 1
          fi

      - name: Post-Deployment Diagnosis
        if: github.event_name == 'push' && env.ENVIRONMENT == 'development'
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service-account.json"
          echo "🔍 Running post-deployment diagnosis..."

          # Run diagnosis with branch-specific parameters
          hosting_site_id="${{ steps.configure_firebase.outputs.hosting_site_id }}"
          function_name="${{ steps.configure_firebase.outputs.function_name }}"
          project_id="${{ steps.determine_env.outputs.project_id }}"

          bash ./scripts/diagnose-deployment.sh "$hosting_site_id" "$function_name" "$project_id"

          echo ""
          echo "🌐 Branch deployment URL: https://$hosting_site_id.web.app"
          echo "⚙️  Expected function: $function_name"
